/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package uk.ac.exeter.opendayrace.client;

import uk.ac.exeter.opendayrace.client.io.ServerConnection;
import uk.ac.exeter.opendayrace.client.ui.Renderer;

import java.io.IOException;
import java.net.*;

public class OpenDayRace {

    private static final int DEFAULT_PORT = 53892;

    public static void main(String[] args) {
        InetAddress address = null;
        int port = DEFAULT_PORT;
        if (args.length > 0) {
            if (args.length > 2) {
                System.err.println(args.length + " arguments were specified, but only 2 are supported (the rest will be ignored)");
            }
            try {
                address = Inet4Address.getByName(args[0]);
            } catch (UnknownHostException e) {
                System.err.println("Failed to parse the given address");
                System.err.println("Usage: [address] [port]");
                return;
            }
            if (args.length > 1) {
                try {
                    port = Integer.parseInt(args[1]);
                } catch (NumberFormatException e) {
                    System.err.println("Failed to parse the given port number");
                    System.err.println("Usage: [address] [port]");
                    return;
                }
            }
        }
        if (address == null) {
            try {
                address = Inet4Address.getLocalHost();
            } catch (UnknownHostException e) {
                System.err.println("Failed to get the any address, please try again or specify the address manually");
                e.printStackTrace();
                return;
            }
        }
        // Enable hardware acceleration
        System.setProperty("sun.java2d.opengl", "true");
        GameState game = new GameState();
        Renderer r = null;
        try {
            r = new Renderer(game);
        } catch (IOException e) {
            e.printStackTrace();
            return;
        }
        InetSocketAddress socketAddress = new InetSocketAddress(address, port);
        new Thread(() -> runNetwork(game, socketAddress), "Network").start();
        while (true) {
            r.run();
        }
    }

    private static void runNetwork(GameState game, SocketAddress address) {
        try {
            new ServerConnection(game, address, e -> {
                System.err.println("IO exception in Network thread");
                e.printStackTrace();
            }).run();
        } catch (IOException e) {
            System.err.println("IO exception when setting up the initial connection; is the server running?");
            e.printStackTrace();
            System.exit(1);
        }
    }
}
